name: Build and Deploy Code

on: [push, pull_request]

jobs:
  build:
    environment:
      name: testing
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
      YOUR_VERCEL_TOKEN: ${{secrets.YOUR_VERCEL_TOKEN}}
      YOUR_VERCEL_ORG_ID: ${{secrets.YOUR_VERCEL_ORG_ID}}
      YOUR_VERCEL_PROJECT_ID: ${{secrets.YOUR_VERCEL_PROJECT_ID}}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
          POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v4

      - name: set up python
        uses: actions/checkout@v4
        with:
          python-version: '3.10'

      - name: update pip
        run: python -m pip install --upgrade pip

      - name: install all dependencies
        run: pip install -r requirements.txt

      - name: test with pytest
        run: |
          pip install pytest
          pytest

#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Login to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Extract metadata
#        id: meta
#        uses: docker/metadata-action@v5
#        with:
#          images: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi_sm
#
#      - name: Build and push
#        uses: docker/build-push-action@v6
#        with:
#          context: .
#          tags: ${{ steps.meta.outputs.tags }}
#          annotations: ${{ steps.meta.outputs.annotations }}
#          push: true

#  deploy:
#    runs-on: ubuntu-latest
#    needs: [build]
#    environment:
#      name: production
#    steps:
#      - name: pulling git repo
#        uses: actions/checkout@v4
#      - name: deploying to Render
#        uses: sws2apps/render-deployment@main
#        with:
#          serviceId: ${{ secrets.RENDER_SERVICE_ID }}
#          apiKey: ${{ secrets.RENDER_API_KEY }}
#          multipleDeployment: false


  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: production

    steps:
      - uses: actions/checkout@v4
      - uses: nexterias/actions-vercel@v1
        with:
          token: ${{ secrets.YOUR_VERCEL_TOKEN }}
          org-id: ${{ secrets.YOUR_VERCEL_ORG_ID }}
          project-id: ${{ secrets.YOUR_VERCEL_PROJECT_ID }}
          production: ${{ github.ref == 'refs/heads/main' }}
          prebuilt: true

